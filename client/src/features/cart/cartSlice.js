import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { selectCurrentCartId, selectToken, selectUser } from '../appSlice';
import ecomAxios from '../../ecomAxios';

const initialState = {
  cart: null,
  orders: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'app/fetchCount',
//   async (amount) => {
//     // const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     // return response.data;
//   }
// );

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setCart: (state, action) => {
      state.cart = action.payload;
    },
    removeCart: (state) => { state.cart = null; },
    setOrders: (state, action) => {
      state.orders = action.payload;
    },
    removeOrders: (state) => { state.orders = []; },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { setCart, setOrders, removeCart, removeOrders } = cartSlice.actions;

export const selectCart = (state) => state.cart.cart;
export const selectOrders = (state) => state.cart.orders;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const getCart = () => async (dispatch, getState) => {
  const currentCartId = selectCurrentCartId(getState());
  if (!currentCartId) return;
  try {
    const cartRes = await ecomAxios.get(`/carts/one/${currentCartId}`)
    dispatch(setCart(cartRes.data))
  } catch (error) {
    console.error(error)
  }
};
export const updateProductInCart = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
};
export const deleteProductFromCart = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
};
export const addProductToCart = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
};
export const createCart = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
};
export const cartCheckedOut = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
};
export const getCheckedoutCarts = () => async (dispatch, getState) => {
  const user = selectUser(getState());
  const token = selectToken(getState());
  try {
    if (!user) return
    const res = await ecomAxios.get(`/carts/checkedout/${user._id}`, {
      headers: {
        authorization: `Bearer ${token}`
      }
    })
    dispatch(setOrders(res.data))
  } catch (error) {
    console.error(error)
  }
};

export default cartSlice.reducer;
