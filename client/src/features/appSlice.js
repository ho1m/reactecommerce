import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getCart, getCheckedoutCarts, removeCart, removeOrders } from './cart/cartSlice';
import ecomAxios from '../ecomAxios';

const initialState = {
  user: null,
  token: null,
  currentCartId: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'app/fetchCount',
//   async (amount) => {
//     // const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     // return response.data;
//   }
// );

export const appSlice = createSlice({
  name: 'app',
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setUser: (state, action) => { state.user = action.payload;},
    removeUser: (state) => { state.user = null; },
    setToken: (state, action) => { state.token = action.payload;},
    removeToken: (state) => { state.token = null; },
    setCurrentCartId: (state, action) => {
      state.currentCartId = action.payload;
    },
    removeCurrentCartId: (state) => {
      state.currentCartId = '';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { 
  setUser, removeUser,
  setToken, removeToken,
  setCurrentCartId, removeCurrentCartId
} = appSlice.actions;

export const selectUser = (state) => state.app.user;
export const selectToken = (state) => state.app.token;
export const selectCurrentCartId = (state) => state.app.currentCartId;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const logout = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
  dispatch(removeUser())
  dispatch(removeToken())
  dispatch(removeCurrentCartId())
  dispatch(removeCart())
  dispatch(removeOrders())
};
export const login = ({loginData, historyMethod}) => async (dispatch, getState) => {
  // const currentToken = selectToken(getState());
  try {
    const loginRes = await ecomAxios.post('/users/login', loginData)
    const { user, token, currentCart } = loginRes.data

    dispatch(setUser(user))
    dispatch(setToken(token))
    dispatch(setCurrentCartId(currentCart))
    dispatch(getCart())
    dispatch(getCheckedoutCarts())
    historyMethod()
  } catch (error) {
    console.error(error)
  }

};
export const register = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
  
};
export const updateUserCurrentCart = () => (dispatch, getState) => {
  // const currentToken = selectToken(getState());
  
};




export default appSlice.reducer;
